{"version":3,"sources":["Editor.js","Formula.js","App.js","serviceWorker.js","index.js"],"names":["ReactEditor","this","editor","EditorJS","holder","props","id","autofocus","tools","plugins","React","Component","Formula","data","api","CSS","baseClass","styles","block","input","wrapper","textarea","nodes","drawView","title","icon","render","katex","value","formula","throwOnError","output","displayMode","addEventListener","event","document","createElement","classList","add","appendChild","blockContent","code","plugin_list","header","Header","list","List","image","SimpleImage","CodeTool","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAiBeA,E,kLAXPC,KAAKC,OAAS,IAAIC,IAAS,CACvBC,OAAQH,KAAKI,MAAMC,GACnBC,WAAW,EACXC,MAAOP,KAAKI,MAAMI,Y,+BAItB,OAAO,yBAAKH,GAAIL,KAAKI,MAAMC,S,GATTI,IAAMC,W,QCqEjBC,G,iBA1DX,cAA4B,IAAdC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,IAAO,oBACvBb,KAAKa,IAAMA,EACXb,KAAKc,IAAM,CACPC,UAAWf,KAAKa,IAAIG,OAAOC,MAC3BC,MAAOlB,KAAKa,IAAIG,OAAOE,MACvBC,QAAS,UACTC,SAAU,wBAGdpB,KAAKY,KAAOA,EACZZ,KAAKqB,MAAQrB,KAAKsB,W,yDApBlB,MAAO,CACHC,MAAO,UACPC,KAAM,2M,uCAKV,OAAO,M,8CAiBD,IAAD,OACCC,EAAS,kBAAMC,IAAMD,OAAO,EAAKJ,MAAMD,SAASO,MAAO,EAAKN,MAAMO,QAAS,CAC7EC,cAAc,EACdC,OAAQ,gBACRC,aAAa,KAMjB,OAHAN,IACAzB,KAAKqB,MAAMD,SAASY,iBAAiB,SAAS,SAACC,GAAD,OAAWR,OAElDzB,KAAKqB,MAAMF,U,iCAIlB,IAAMA,EAAUe,SAASC,cAAc,OAEjCf,EAAWc,SAASC,cAAc,YAClCP,EAAUM,SAASC,cAAc,UAOvC,OALAhB,EAAQiB,UAAUC,IAAIrC,KAAKc,IAAIC,UAAWf,KAAKc,IAAIK,SACnDC,EAASgB,UAAUC,IAAIrC,KAAKc,IAAIM,SAAUpB,KAAKc,IAAII,OACnDC,EAAQmB,YAAYlB,GACpBD,EAAQmB,YAAYV,GAEb,CACHT,QAASA,EACTC,SAAUA,EACVQ,QAASA,K,2BAUZW,GACD,MAAO,CACHX,QAAS5B,KAAKqB,MAAMD,SAASF,U,gCAPjC,MAAO,CACLsB,MAAM,O,uECpDVC,EAAc,CAChBC,OAAQC,IACRC,KAAMC,IACNC,MAAOC,IACPnB,QAASjB,EACT6B,KAAMQ,KAWKC,MARf,WACI,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,CAAa7C,GAAG,SAASG,QAASiC,MCT1BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SAG1BxB,SAASX,MAAQ,eDsHX,kBAAmBoC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29d4c5fa.chunk.js","sourcesContent":["import React from 'react';\n\nimport EditorJS from '@editorjs/editorjs';\n\nclass ReactEditor extends React.Component {\n    componentDidMount() {\n        this.editor = new EditorJS({\n            holder: this.props.id,\n            autofocus: true,\n            tools: this.props.plugins,\n        });\n    }\n    render() {\n        return <div id={this.props.id}></div>\n    }\n}\n\nexport default ReactEditor;","import katex from 'katex/dist/katex.mjs';\nimport 'katex/dist/katex.min.css';\n\nclass Formula {\n    static get toolbox() {\n        return {\n            title: 'Formula',\n            icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"black\" width=\"18px\" height=\"18px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M18 4H6v2l6.5 6L6 18v2h12v-3h-7l5-5-5-5h7z\"/></svg>',\n        };\n    }\n\n    static get enableLineBreaks() {\n        return true;\n    }\n\n    constructor({ data, api }) {\n        this.api = api;\n        this.CSS = {\n            baseClass: this.api.styles.block,\n            input: this.api.styles.input,\n            wrapper: 'ce-code',\n            textarea: 'ce-formula__textarea',\n        };\n\n        this.data = data;\n        this.nodes = this.drawView();\n    }\n    \n    \n    render() {\n        const render = () => katex.render(this.nodes.textarea.value, this.nodes.formula, {\n            throwOnError: false,\n            output: \"htmlAndMathml\",\n            displayMode: true,\n        });\n\n        render();\n        this.nodes.textarea.addEventListener('input', (event) => render());\n\n        return this.nodes.wrapper;\n    }\n\n    drawView() {\n        const wrapper = document.createElement('div');\n        \n        const textarea = document.createElement('textarea');\n        const formula = document.createElement('output');\n    \n        wrapper.classList.add(this.CSS.baseClass, this.CSS.wrapper);\n        textarea.classList.add(this.CSS.textarea, this.CSS.input);\n        wrapper.appendChild(textarea);\n        wrapper.appendChild(formula);\n\n        return {\n            wrapper: wrapper,\n            textarea: textarea,\n            formula: formula,\n        };\n    }\n\n    static get sanitize() {\n        return {\n          code: true,\n        };\n    }\n\n    save(blockContent) {\n        return { \n            formula: this.nodes.textarea.input,\n        }\n    }\n}\n\nexport default Formula;","import React from 'react';\nimport './App.css';\nimport ReactEditor from './Editor.js'\n\nimport Formula from './Formula';\nimport SimpleImage from '@editorjs/simple-image'; \nimport Header from '@editorjs/header';\nimport List from '@editorjs/list';\nimport CodeTool from '@editorjs/code';\n\nconst plugin_list = {\n    header: Header,\n    list: List,\n    image: SimpleImage,\n    formula: Formula,\n    code: CodeTool,\n};\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ReactEditor id=\"editor\" plugins={plugin_list} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\ndocument.title = \"React editor\";\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}